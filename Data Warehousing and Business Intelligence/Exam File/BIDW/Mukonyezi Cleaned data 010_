{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "449e0b71",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import random as rnd\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from scipy.stats import zscore\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "042cb605",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>No_Pation</th>\n",
       "      <th>Gender</th>\n",
       "      <th>AGE</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>502</td>\n",
       "      <td>17975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>735</td>\n",
       "      <td>34221</td>\n",
       "      <td>M</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>420</td>\n",
       "      <td>47975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>680</td>\n",
       "      <td>87656</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>504</td>\n",
       "      <td>34223</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID  No_Pation Gender   AGE  Urea    Cr  HbA1c  Chol   TG  HDL  LDL  VLDL  \\\n",
       "0  502      17975      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   0.5   \n",
       "1  735      34221      M  26.0   4.5  62.0    4.9   3.7  1.4  1.1  2.1   0.6   \n",
       "2  420      47975      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   0.5   \n",
       "3  680      87656      F  50.0   4.7  46.0    4.9   4.2  0.9  2.4  1.4   0.5   \n",
       "4  504      34223      M  33.0   7.1  46.0    4.9   4.9  1.0  0.8  2.0   0.4   \n",
       "\n",
       "    BMI CLASS  \n",
       "0  24.0     N  \n",
       "1  23.0     N  \n",
       "2  24.0     N  \n",
       "3  24.0     N  \n",
       "4  21.0     N  "
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Mukolab Loading the dataset\n",
    "df = pd.read_csv('C:/Users/MMU023/Desktop/diabetes_unclean.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "77b31407",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'No_Pation', 'Gender', 'AGE', 'Urea', 'Cr', 'HbA1c', 'Chol', 'TG',\n",
       "       'HDL', 'LDL', 'VLDL', 'BMI', 'CLASS'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab checking columns of the dataset\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "76541032",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients ID</th>\n",
       "      <th>Number of Patients</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>502</td>\n",
       "      <td>17975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>735</td>\n",
       "      <td>34221</td>\n",
       "      <td>M</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>420</td>\n",
       "      <td>47975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>680</td>\n",
       "      <td>87656</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>504</td>\n",
       "      <td>34223</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patients ID  Number of Patients Sex  Patient Age   Urea    Cr  HbA1c  Chol  \\\n",
       "0          502               17975   F          50.0   4.7  46.0    4.9   4.2   \n",
       "1          735               34221   M          26.0   4.5  62.0    4.9   3.7   \n",
       "2          420               47975   F          50.0   4.7  46.0    4.9   4.2   \n",
       "3          680               87656   F          50.0   4.7  46.0    4.9   4.2   \n",
       "4          504               34223   M          33.0   7.1  46.0    4.9   4.9   \n",
       "\n",
       "    TG  HDL  LDL  VLDL   BMI CLASS  \n",
       "0  0.9  2.4  1.4   0.5  24.0     N  \n",
       "1  1.4  1.1  2.1   0.6  23.0     N  \n",
       "2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "3  0.9  2.4  1.4   0.5  24.0     N  \n",
       "4  1.0  0.8  2.0   0.4  21.0     N  "
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab renaming the columns in the dataset\n",
    "df.rename(columns={'ID':'Patients ID','No_Pation':'Number of Patients','Gender':'Sex','AGE':'Patient Age '},inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "8701db30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Patients ID', 'Number of Patients', 'Sex', 'Patient Age ', 'Urea',\n",
       "       'Cr', 'HbA1c', 'Chol', 'TG', 'HDL', 'LDL', 'VLDL', 'BMI', 'CLASS'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab checking columns of the dataset\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "73f85d0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Patients ID           0\n",
       "Number of Patients    0\n",
       "Sex                   0\n",
       "Patient Age           1\n",
       "Urea                  1\n",
       "Cr                    2\n",
       "HbA1c                 3\n",
       "Chol                  2\n",
       "TG                    2\n",
       "HDL                   1\n",
       "LDL                   2\n",
       "VLDL                  1\n",
       "BMI                   0\n",
       "CLASS                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab checking for missing values\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "22b0249d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.284155069582505"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_value = df['HbA1c'].mean()\n",
    "mean_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "2c93f3d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "68.97318768619662"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_value = df['Cr'].mean()\n",
    "mean_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "225112b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mukolab droping missing values\n",
    "df.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "4b864ac5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Patients ID           0\n",
       "Number of Patients    0\n",
       "Sex                   0\n",
       "Patient Age           0\n",
       "Urea                  0\n",
       "Cr                    0\n",
       "HbA1c                 0\n",
       "Chol                  0\n",
       "TG                    0\n",
       "HDL                   0\n",
       "LDL                   0\n",
       "VLDL                  0\n",
       "BMI                   0\n",
       "CLASS                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "1e508e69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 994 entries, 0 to 1008\n",
      "Data columns (total 14 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Patients ID         994 non-null    int64  \n",
      " 1   Number of Patients  994 non-null    int64  \n",
      " 2   Sex                 994 non-null    object \n",
      " 3   Patient Age         994 non-null    float64\n",
      " 4   Urea                994 non-null    float64\n",
      " 5   Cr                  994 non-null    float64\n",
      " 6   HbA1c               994 non-null    float64\n",
      " 7   Chol                994 non-null    float64\n",
      " 8   TG                  994 non-null    float64\n",
      " 9   HDL                 994 non-null    float64\n",
      " 10  LDL                 994 non-null    float64\n",
      " 11  VLDL                994 non-null    float64\n",
      " 12  BMI                 994 non-null    float64\n",
      " 13  CLASS               994 non-null    object \n",
      "dtypes: float64(10), int64(2), object(2)\n",
      "memory usage: 116.5+ KB\n"
     ]
    }
   ],
   "source": [
    "#checking for general information of my data\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "4a1b88c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CLASS\n",
       "N     102\n",
       "N       1\n",
       "P      53\n",
       "Y     830\n",
       "Y       8\n",
       "Name: CLASS, dtype: int64"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab checking for duplicates and drop them if necessary\n",
    "df.groupby('CLASS')['CLASS'].agg('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "97a8d777",
   "metadata": {},
   "outputs": [],
   "source": [
    "duplicates = df[df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "1a20d8c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'N ', 'P', 'Y', 'Y '], dtype=object)"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CLASS'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "f8a67bbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['CLASS'] = df['CLASS'].str.replace('N ','N')\n",
    "df['CLASS'] = df['CLASS'].str.replace('Y ','Y')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "e3f065ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "duplicates = df[df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "7f09af59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['N', 'P', 'Y'], dtype=object)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['CLASS'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "a542caf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CLASS\n",
       "N    103\n",
       "P     53\n",
       "Y    838\n",
       "Name: CLASS, dtype: int64"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab checking for duplicates and drop them if necessary\n",
    "df.groupby('CLASS')['CLASS'].agg('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "42b9c15f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sex\n",
       "F    430\n",
       "M    562\n",
       "f      2\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Sex')['Sex'].agg('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "161b5580",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['F', 'M', 'f'], dtype=object)"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Sex'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "71ffe102",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Sex'] = df['Sex'].str.replace('f','F')\n",
    "df['Sex'] = df['Sex'].str.replace('m','M')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "7fe7b4dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "duplicates = df[df.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "dec9750e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['F', 'M'], dtype=object)"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Sex'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "ad2153c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sex\n",
       "F    432\n",
       "M    562\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('Sex')['Sex'].agg('count')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "a84eda13",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MMU023\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='HbA1c'>"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAMl0lEQVR4nO3dfWyd91nG8etKvGnJoGxxtgDuhNeZrWzL2KYgDSag8ZIRla0FCRAIqCdAvAg5WcV4WVPxVxNVgIA0k4aqvSSBqtPUlYEgREubqIA0CknXzh1t16PRdTHdmjpiG0vWzcnNH+d4OCd2msTH5zpP8v1IUXxO3ed32z7+5nce249dVQIA9N+K9AAAcKUiwAAQQoABIIQAA0AIAQaAkKGLeeW1a9fW6OjoMo0CAJeno0ePPldVr+i+/6ICPDo6qiNHjvRuKgC4Atj+4kL3cwoCAEIIMACEEGAACCHAABBCgAEghAADQAgBBoAQAgwAIQQYAEIIMACEEGAACCHAABBCgAEghAADQAgBBoAQAgwAIQQYAEIIMACEEGAACLmo3wmHK9fu3bvVarX6vu709LQkaWRkpO9rX6qxsTFNTk6mx0ADEGBckFarpYcffUynV6/p67orT35VkvTl55vxUF158kR6BDRIMx7VGAinV6/RqWuv7+uaqx7fL0l9X/dSzc0LXAjOAQNACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANASKMDvHv3bu3evTs9BoAB0qQuDKUHWIpWq5UeAcCAaVIXGr0DBoAmI8AAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhfQnwoUOHdN111+nw4cP9WA4AlmxmZkZbt25Vq9XS1q1bNTMz0/M1+hLgnTt3SpJ27NjRj+UAYMn27t2rqakp3XbbbZqamtK+fft6vsayB/jQoUOanZ2VJM3OzrILBjDwZmZmdODAAVWVnnrqKVWVDhw40PNd8FBPj7aAud3vnB07dmjjxo09Ofb09LROnTqlbdu29eR4WFyr1dKKb1V6jIG34ptfU6v1dR6TQa1WS6tWrVrSMfbu3aszZ86cdd/p06e1b98+3XzzzUs69nwvuAO2/Zu2j9g+cvz48YteYG73u9htABg0991334LtOnjwYE/XecEdcFXdKelOSdqwYcNFb4GGhobOekOGhnq36R4ZGZEk7dq1q2fHxMK2bdumo1/4SnqMgXfmJVdp7Jp1PCaDevHsY9OmTdq/f/857dq8efOSjz3fsp8DvuWWW866vX379uVeEgCWZGJiQitWnJ3HlStX6qabburpOsse4PHx8e/seoeGhnp2/hcAlsvw8LC2bNki2xodHZVtbdmyRcPDwz1dpy/fhja3C2b3C6ApJiYmtH79et16661av359z3e/Uh++C0Jq74LHx8f7sRQA9MTw8LDuuOMOSfrO373GjyIDQAgBBoAQAgwAIQQYAEIIMACEEGAACCHAABBCgAEghAADQAgBBoAQAgwAIQQYAEIIMACEEGAACCHAABBCgAEghAADQAgBBoAQAgwAIQQYAEIIMACEEGAACCHAABBCgAEghAADQAgBBoAQAgwAIQQYAEIIMACEEGAACCHAABBCgAEghAADQAgBBoAQAgwAIQQYAEIIMACEEGAACBlKD7AUY2Nj6READJgmdaHRAZ6cnEyPAGDANKkLnIIAgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAIIcAAEEKAASCEAANAyFB6ADTHypMntOrx/X1ec0aS+r7upVp58oSkdekx0BAEGBdkbGwssu709KwkaWSkKVFbF3tfoXkIMC7I5ORkegTgssM5YAAIIcAAEEKAASCEAANACAEGgBACDAAhBBgAQggwAIQQYAAI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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Mukolab checking for outliers\n",
    "sns.boxplot(df['HbA1c'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "e4f7300d",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MMU023\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Cr'>"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['Cr'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "e44e6402",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "ce7372d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "401.0"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_Cr = df['Cr'].quantile(0.995)\n",
    "max_Cr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "06a947c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14.703499999999996"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max_HbA1c = df['HbA1c'].quantile(0.995)\n",
    "max_HbA1c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "f8a28a44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients ID</th>\n",
       "      <th>Number of Patients</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>502</td>\n",
       "      <td>17975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>735</td>\n",
       "      <td>34221</td>\n",
       "      <td>M</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>420</td>\n",
       "      <td>47975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>680</td>\n",
       "      <td>87656</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>504</td>\n",
       "      <td>34223</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patients ID  Number of Patients Sex  Patient Age   Urea    Cr  HbA1c  Chol  \\\n",
       "0          502               17975   F          50.0   4.7  46.0    4.9   4.2   \n",
       "1          735               34221   M          26.0   4.5  62.0    4.9   3.7   \n",
       "2          420               47975   F          50.0   4.7  46.0    4.9   4.2   \n",
       "3          680               87656   F          50.0   4.7  46.0    4.9   4.2   \n",
       "4          504               34223   M          33.0   7.1  46.0    4.9   4.9   \n",
       "\n",
       "    TG  HDL  LDL  VLDL   BMI CLASS  \n",
       "0  0.9  2.4  1.4   0.5  24.0     N  \n",
       "1  1.4  1.1  2.1   0.6  23.0     N  \n",
       "2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "3  0.9  2.4  1.4   0.5  24.0     N  \n",
       "4  1.0  0.8  2.0   0.4  21.0     N  "
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['HbA1c']<max_HbA1c]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "fb3394ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Patients ID</th>\n",
       "      <th>Number of Patients</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>502</td>\n",
       "      <td>17975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>735</td>\n",
       "      <td>34221</td>\n",
       "      <td>M</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>420</td>\n",
       "      <td>47975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>680</td>\n",
       "      <td>87656</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>504</td>\n",
       "      <td>34223</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Patients ID  Number of Patients Sex  Patient Age   Urea    Cr  HbA1c  Chol  \\\n",
       "0          502               17975   F          50.0   4.7  46.0    4.9   4.2   \n",
       "1          735               34221   M          26.0   4.5  62.0    4.9   3.7   \n",
       "2          420               47975   F          50.0   4.7  46.0    4.9   4.2   \n",
       "3          680               87656   F          50.0   4.7  46.0    4.9   4.2   \n",
       "4          504               34223   M          33.0   7.1  46.0    4.9   4.9   \n",
       "\n",
       "    TG  HDL  LDL  VLDL   BMI CLASS  \n",
       "0  0.9  2.4  1.4   0.5  24.0     N  \n",
       "1  1.4  1.1  2.1   0.6  23.0     N  \n",
       "2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "3  0.9  2.4  1.4   0.5  24.0     N  \n",
       "4  1.0  0.8  2.0   0.4  21.0     N  "
      ]
     },
     "execution_count": 165,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['Cr']<max_Cr]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "cfb57fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df[df['HbA1c']<max_HbA1c]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "17262903",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MMU023\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='HbA1c'>"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df1['HbA1c'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "bc890733",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df[df['Cr']<max_Cr]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "29b4e366",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\MMU023\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Cr'>"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df1['Cr'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "2d8d3ec3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('Cleaned_dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "424ead30",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import base64\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "ddb7fd04",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Patients ID</th>\n",
       "      <th>Number of Patients</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>502</td>\n",
       "      <td>17975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>735</td>\n",
       "      <td>34221</td>\n",
       "      <td>M</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>420</td>\n",
       "      <td>47975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>680</td>\n",
       "      <td>87656</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>504</td>\n",
       "      <td>34223</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Patients ID  Number of Patients Sex  Patient Age   Urea    Cr  \\\n",
       "0           0          502               17975   F          50.0   4.7  46.0   \n",
       "1           1          735               34221   M          26.0   4.5  62.0   \n",
       "2           2          420               47975   F          50.0   4.7  46.0   \n",
       "3           3          680               87656   F          50.0   4.7  46.0   \n",
       "4           4          504               34223   M          33.0   7.1  46.0   \n",
       "\n",
       "   HbA1c  Chol   TG  HDL  LDL  VLDL   BMI CLASS  \n",
       "0    4.9   4.2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "1    4.9   3.7  1.4  1.1  2.1   0.6  23.0     N  \n",
       "2    4.9   4.2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "3    4.9   4.2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "4    4.9   4.9  1.0  0.8  2.0   0.4  21.0     N  "
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab Loading the cleaned dataset for developing a linear regression model \n",
    "df1 = pd.read_csv('C:/Users/MMU023/Desktop/Cleaned_dataset.csv')\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "4622eeee",
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df1.drop('Unnamed: 0', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "e558db62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 994 entries, 0 to 993\n",
      "Data columns (total 14 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Patients ID         994 non-null    int64  \n",
      " 1   Number of Patients  994 non-null    int64  \n",
      " 2   Sex                 994 non-null    object \n",
      " 3   Patient Age         994 non-null    float64\n",
      " 4   Urea                994 non-null    float64\n",
      " 5   Cr                  994 non-null    float64\n",
      " 6   HbA1c               994 non-null    float64\n",
      " 7   Chol                994 non-null    float64\n",
      " 8   TG                  994 non-null    float64\n",
      " 9   HDL                 994 non-null    float64\n",
      " 10  LDL                 994 non-null    float64\n",
      " 11  VLDL                994 non-null    float64\n",
      " 12  BMI                 994 non-null    float64\n",
      " 13  CLASS               994 non-null    object \n",
      "dtypes: float64(10), int64(2), object(2)\n",
      "memory usage: 108.8+ KB\n"
     ]
    }
   ],
   "source": [
    "#checking for general information of my data\n",
    "df1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "ad650d1a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Patients ID</th>\n",
       "      <th>Number of Patients</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Patient Age</th>\n",
       "      <th>Urea</th>\n",
       "      <th>Cr</th>\n",
       "      <th>HbA1c</th>\n",
       "      <th>Chol</th>\n",
       "      <th>TG</th>\n",
       "      <th>HDL</th>\n",
       "      <th>LDL</th>\n",
       "      <th>VLDL</th>\n",
       "      <th>BMI</th>\n",
       "      <th>CLASS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>502</td>\n",
       "      <td>17975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>735</td>\n",
       "      <td>34221</td>\n",
       "      <td>M</td>\n",
       "      <td>26.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>62.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>3.7</td>\n",
       "      <td>1.4</td>\n",
       "      <td>1.1</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.6</td>\n",
       "      <td>23.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>420</td>\n",
       "      <td>47975</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>680</td>\n",
       "      <td>87656</td>\n",
       "      <td>F</td>\n",
       "      <td>50.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.2</td>\n",
       "      <td>0.9</td>\n",
       "      <td>2.4</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.5</td>\n",
       "      <td>24.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>504</td>\n",
       "      <td>34223</td>\n",
       "      <td>M</td>\n",
       "      <td>33.0</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>4.9</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>21.0</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Patients ID  Number of Patients Sex  Patient Age   Urea    Cr  \\\n",
       "0           0          502               17975   F          50.0   4.7  46.0   \n",
       "1           1          735               34221   M          26.0   4.5  62.0   \n",
       "2           2          420               47975   F          50.0   4.7  46.0   \n",
       "3           3          680               87656   F          50.0   4.7  46.0   \n",
       "4           4          504               34223   M          33.0   7.1  46.0   \n",
       "\n",
       "   HbA1c  Chol   TG  HDL  LDL  VLDL   BMI CLASS  \n",
       "0    4.9   4.2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "1    4.9   3.7  1.4  1.1  2.1   0.6  23.0     N  \n",
       "2    4.9   4.2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "3    4.9   4.2  0.9  2.4  1.4   0.5  24.0     N  \n",
       "4    4.9   4.9  1.0  0.8  2.0   0.4  21.0     N  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab Loading the cleaned dataset for developing a linear regression model \n",
    "df1 = pd.read_csv('C:/Users/MMU023/Desktop/Cleaned_dataset.csv')\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "ed73067b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,5))\n",
    "df1['HbA1c'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "c953ddcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Frequency'>"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmQAAAEvCAYAAADrZt2OAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAUyUlEQVR4nO3df/BldXkf8PfjriKgKVAWS4BksbNjgo6JZKUmZmwjsaImYtqxpVM71DGhndJWk84kYJyY/EFHO6kx/WEa1GSIGimiUapOK5KYTP+ouChWfkhZA8IKwmprUOuA4NM/7ln5Shf2Gvfs57t7Xq+ZO/eczz3n3uc5y17ee86551R3BwCAcR43ugAAgKUTyAAABhPIAAAGE8gAAAYTyAAABhPIAAAG2zq6gO/FiSee2Nu3bx9dBgDAAV133XVf6u5t+3vtsA5k27dvz65du0aXAQBwQFX1+Ud7zSFLAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEO63tZHirbL/rQ6BIOitvf8JLRJQAA+2EPGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGCzBrKq+sWqurGqbqiqd1fVE6vqhKq6uqpunZ6P37D8xVW1u6puqaoXzlkbAMBmMVsgq6pTkvzLJDu7+xlJtiQ5L8lFSa7p7h1JrpnmU1VnTK8/Pck5Sd5SVVvmqg8AYLOY+5Dl1iRHV9XWJMckuSvJuUkum16/LMnLpulzk1ze3fd3921Jdic5a+b6AACGmy2QdfcXkvxmkjuS3J3kL7r7I0me0t13T8vcneSkaZVTkty54S32TGMAAEe0OQ9ZHp/VXq/Tk3x/kmOr6hWPtcp+xno/73tBVe2qql179+49OMUCAAw05yHLn05yW3fv7e5vJnlfkp9Ick9VnZwk0/O90/J7kpy2Yf1TszrE+R26+9Lu3tndO7dt2zZj+QAAh8acgeyOJM+pqmOqqpKcneTmJFclOX9a5vwkH5imr0pyXlUdVVWnJ9mR5NoZ6wMA2BS2zvXG3f3xqroyySeTPJjkU0kuTfKkJFdU1auyCm0vn5a/saquSHLTtPyF3f3QXPUBAGwWswWyJOnu1yd5/SOG789qb9n+lr8kySVz1gQAsNm4Uj8AwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgswayqjquqq6sqs9W1c1V9eNVdUJVXV1Vt07Px29Y/uKq2l1Vt1TVC+esDQBgs5h7D9lvJ/mv3f1DSX4kyc1JLkpyTXfvSHLNNJ+qOiPJeUmenuScJG+pqi0z1wcAMNxsgayqvi/J85K8PUm6+4Hu/kqSc5NcNi12WZKXTdPnJrm8u+/v7tuS7E5y1lz1AQBsFnPuIXtqkr1Jfr+qPlVVb6uqY5M8pbvvTpLp+aRp+VOS3Llh/T3T2HeoqguqaldV7dq7d++M5QMAHBpzBrKtSc5M8jvd/awkX890ePJR1H7G+v8b6L60u3d2985t27YdnEoBAAaaM5DtSbKnuz8+zV+ZVUC7p6pOTpLp+d4Ny5+2Yf1Tk9w1Y30AAJvCbIGsu7+Y5M6qeto0dHaSm5JcleT8aez8JB+Ypq9Kcl5VHVVVpyfZkeTaueoDANgsts78/v8iybuq6glJ/jzJK7MKgVdU1auS3JHk5UnS3TdW1RVZhbYHk1zY3Q/NXB8AwHCzBrLuvj7Jzv28dPajLH9JkkvmrAkAYLNxpX4AgMEEMgCAwQQyAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwdYKZFX1jLkLAQBYqnX3kP2nqrq2qv5ZVR03Z0EAAEuzViDr7p9M8g+TnJZkV1X9YVW9YNbKAAAWYu1zyLr71iSvS/IrSf5mkn9XVZ+tqr8zV3EAAEuw7jlkz6yq30pyc5LnJ/nZ7v7hafq3ZqwPAOCIt3XN5f5DkrcmeW13f2PfYHffVVWvm6UyAICFWDeQvTjJN7r7oSSpqscleWJ3/9/ufsds1QEALMC655B9NMnRG+aPmcYAAPgerRvIntjdX9s3M00fM09JAADLsm4g+3pVnblvpqp+LMk3HmN5AADWtO45ZK9J8p6qumuaPznJ35+lIgCAhVkrkHX3J6rqh5I8LUkl+Wx3f3PWygAAFmLdPWRJ8uwk26d1nlVV6e4/mKUqAIAFWSuQVdU7kvz1JNcneWga7iQCGQDA92jdPWQ7k5zR3T1nMQAAS7TuryxvSPLX5iwEAGCp1t1DdmKSm6rq2iT37xvs7pfOUhUAwIKsG8h+fc4iAACWbN3LXvxpVf1gkh3d/dGqOibJlnlLAwBYhrXOIauqX0hyZZLfnYZOSfL+mWoCAFiUdU/qvzDJc5PclyTdfWuSk+YqCgBgSdYNZPd39wP7Zqpqa1bXIQMA4Hu0biD706p6bZKjq+oFSd6T5L/MVxYAwHKsG8guSrI3yWeS/JMkH07yurmKAgBYknV/ZfmtJG+dHgAAHETr3svytuznnLHufupBrwgAYGG+m3tZ7vPEJC9PcsLBLwcAYHnWOoesu7+84fGF7n5zkufPWxoAwDKse8jyzA2zj8tqj9mTZ6kIAGBh1j1k+W83TD+Y5PYkf++gVwMAsEDr/sryp+YuBABgqdY9ZPlLj/V6d7/p4JQDALA8382vLJ+d5Kpp/meT/FmSO+coCgBgSdYNZCcmObO7v5okVfXrSd7T3T8/V2EAAEux7q2TfiDJAxvmH0iy/aBXAwCwQOvuIXtHkmur6o+yumL/zyX5g9mqAgBYkHUvDHtJklcm+T9JvpLkld39r9dZt6q2VNWnquqD0/wJVXV1Vd06PR+/YdmLq2p3Vd1SVS/8rrsBADgMrXvIMkmOSXJfd/92kj1Vdfqa6706yc0b5i9Kck1370hyzTSfqjojyXlJnp7knCRvqaot30V9AACHpbUCWVW9PsmvJLl4Gnp8kneusd6pSV6S5G0bhs9Nctk0fVmSl20Yv7y77+/u25LsTnLWOvUBABzO1t1D9nNJXprk60nS3XdlvVsnvTnJLyf51oaxp3T33dP73J3kpGn8lHznZTT2TGMAAEe0dQPZA93dWZ3Qn6o69kArVNXPJLm3u69b8zNqP2O9n/e9oKp2VdWuvXv3rvnWAACb17qB7Iqq+t0kx1XVLyT5aJK3HmCd5yZ5aVXdnuTyJM+vqncmuaeqTk6S6fneafk9SU7bsP6pSe565Jt296XdvbO7d27btm3N8gEANq8DBrKqqiT/OcmVSd6b5GlJfq27//1jrdfdF3f3qd29PauT9f+4u1+R1dX+z58WOz/JB6bpq5KcV1VHTT8Y2JHk2u++JQCAw8sBr0PW3V1V7+/uH0ty9UH4zDdktcftVUnuSPLy6XNurKorktyU5MEkF3b3Qwfh8wAANrV1Lwz7P6rq2d39ib/Mh3T3x5J8bJr+cpKzH2W5S5Jc8pf5DACAw9W6geynkvzT6Xywr2d1An539zPnKgwAYCkeM5BV1Q909x1JXnSI6gEAWJwD7SF7f5Izu/vzVfXe7v67h6AmAIBFOdCvLDdeG+ypcxYCALBUBwpk/SjTAAAcJAc6ZPkjVXVfVnvKjp6mk4dP6v++WasDAFiAxwxk3b3lUBUCALBU6946CQCAmQhkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDCWQAAIMJZAAAgwlkAACDzRbIquq0qvqTqrq5qm6sqldP4ydU1dVVdev0fPyGdS6uqt1VdUtVvXCu2gAANpM595A9mORfdfcPJ3lOkgur6owkFyW5prt3JLlmms/02nlJnp7knCRvqaotM9YHALApzBbIuvvu7v7kNP3VJDcnOSXJuUkumxa7LMnLpulzk1ze3fd3921Jdic5a676AAA2i0NyDllVbU/yrCQfT/KU7r47WYW2JCdNi52S5M4Nq+2ZxgAAjmizB7KqelKS9yZ5TXff91iL7mes9/N+F1TVrqratXfv3oNVJgDAMLMGsqp6fFZh7F3d/b5p+J6qOnl6/eQk907je5KctmH1U5Pc9cj37O5Lu3tnd+/ctm3bfMUDABwic/7KspK8PcnN3f2mDS9dleT8afr8JB/YMH5eVR1VVacn2ZHk2rnqAwDYLLbO+N7PTfKPknymqq6fxl6b5A1JrqiqVyW5I8nLk6S7b6yqK5LclNUvNC/s7odmrA8AYFOYLZB193/P/s8LS5KzH2WdS5JcMldNAACbkSv1AwAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADCaQAQAMJpABAAwmkAEADLZ1dAEcOtsv+tDoEg6a29/wktElAMBBYw8ZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGACGQDAYAIZAMBgAhkAwGCbLpBV1TlVdUtV7a6qi0bXAwAwt62jC9ioqrYk+Y9JXpBkT5JPVNVV3X3T2MrYbLZf9KHRJRw0t7/hJaNLAGCwTRXIkpyVZHd3/3mSVNXlSc5NIpDBYeBICcpCMnCobbZAdkqSOzfM70nyNwbVAofEkRJigOU5kr6/Rv9DbLMFstrPWH/HAlUXJLlgmv1aVd0yQx0nJvnSDO97uNC//pfa/4lJvlRvHF3GMEv+s0/0v+j+642HpP8ffLQXNlsg25PktA3zpya5a+MC3X1pkkvnLKKqdnX3zjk/YzPTv/6X2v+Se0/0r3/9j+x/s/3K8hNJdlTV6VX1hCTnJblqcE0AALPaVHvIuvvBqvrnSf5bki1Jfq+7bxxcFgDArDZVIEuS7v5wkg8PLmPWQ6KHAf0v25L7X3Lvif71v2xD+6/uPvBSAADMZrOdQwYAsDgC2QZLuG1TVf1eVd1bVTdsGDuhqq6uqlun5+M3vHbxtD1uqaoXjqn64Kmq06rqT6rq5qq6sapePY0vYhtU1ROr6tqq+vTU/29M44voP1ndEaSqPlVVH5zmF9N7klTV7VX1maq6vqp2TWOL2AZVdVxVXVlVn52+A358Qb0/bfoz3/e4r6pes5T+k6SqfnH63ruhqt49fR9unv6722N12HZLks8leWqSJyT5dJIzRtc1Q5/PS3Jmkhs2jP2bJBdN0xcleeM0fca0HY5Kcvq0fbaM7uF77P/kJGdO009O8r+mPhexDbK61t+TpunHJ/l4kucspf+pp19K8odJPjjNL6b3qa/bk5z4iLFFbIMklyX5+Wn6CUmOW0rvj9gOW5J8MatrYi2i/6wuPH9bkqOn+SuS/OPN1L89ZA/79m2buvuBJPtu23RE6e4/S/K/HzF8blZfVJmeX7Zh/PLuvr+7b0uyO6vtdNjq7ru7+5PT9FeT3JzVX9RFbINe+do0+/jp0VlI/1V1apKXJHnbhuFF9H4AR/w2qKrvy+ofpG9Pku5+oLu/kgX0vh9nJ/lcd38+y+p/a5Kjq2prkmOyus7ppulfIHvY/m7bdMqgWg61p3T33ckqsCQ5aRo/ordJVW1P8qys9hItZhtMh+yuT3Jvkqu7e0n9vznJLyf51oaxpfS+Tyf5SFVdV6s7nyTL2AZPTbI3ye9Ph6zfVlXHZhm9P9J5Sd49TS+i/+7+QpLfTHJHkruT/EV3fySbqH+B7GEHvG3TAh2x26SqnpTkvUle0933Pdai+xk7rLdBdz/U3T+a1Z0wzqqqZzzG4kdM/1X1M0nu7e7r1l1lP2OHZe+P8NzuPjPJi5JcWFXPe4xlj6RtsDWr0zV+p7ufleTrWR2iejRHUu/fVquLrr80yXsOtOh+xg7b/qdzw87N6vDj9yc5tqpe8Vir7Gds1v4Fsocd8LZNR7B7qurkJJme753Gj8htUlWPzyqMvau73zcNL2obJMl0uOZjSc7JMvp/bpKXVtXtWZ2S8PyqemeW0fu3dfdd0/O9Sf4oq8MwS9gGe5LsmfYIJ8mVWQW0JfS+0YuSfLK775nml9L/Tye5rbv3dvc3k7wvyU9kE/UvkD1sybdtuirJ+dP0+Uk+sGH8vKo6qqpOT7IjybUD6jtoqqqyOofk5u5+04aXFrENqmpbVR03TR+d1ZfUZ7OA/rv74u4+tbu3Z/X3+4+7+xVZQO/7VNWxVfXkfdNJ/naSG7KAbdDdX0xyZ1U9bRo6O8lNWUDvj/AP8vDhymQ5/d+R5DlVdcz0/4GzszqHePP0P/qXD5vpkeTFWf3q7nNJfnV0PTP1+O6sjp9/M6t/AbwqyV9Nck2SW6fnEzYs/6vT9rglyYtG138Q+v/JrHY7/88k10+PFy9lGyR5ZpJPTf3fkOTXpvFF9L+hp7+Vh39luZjeszqP6tPT48Z933NL2QZJfjTJrum///cnOX4pvU/9HJPky0n+yoaxJfX/G1n9A/SGJO/I6heUm6Z/V+oHABjMIUsAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwQQyAIDBBDIAgMEEMgCAwf4fv05ll8oqpysAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (10,5))\n",
    "df1['Cr'].plot(kind = 'hist')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "6dbd9c74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 994 entries, 0 to 993\n",
      "Data columns (total 15 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   Unnamed: 0          994 non-null    int64  \n",
      " 1   Patients ID         994 non-null    int64  \n",
      " 2   Number of Patients  994 non-null    int64  \n",
      " 3   Sex                 994 non-null    object \n",
      " 4   Patient Age         994 non-null    float64\n",
      " 5   Urea                994 non-null    float64\n",
      " 6   Cr                  994 non-null    float64\n",
      " 7   HbA1c               994 non-null    float64\n",
      " 8   Chol                994 non-null    float64\n",
      " 9   TG                  994 non-null    float64\n",
      " 10  HDL                 994 non-null    float64\n",
      " 11  LDL                 994 non-null    float64\n",
      " 12  VLDL                994 non-null    float64\n",
      " 13  BMI                 994 non-null    float64\n",
      " 14  CLASS               994 non-null    object \n",
      "dtypes: float64(10), int64(3), object(2)\n",
      "memory usage: 116.6+ KB\n"
     ]
    }
   ],
   "source": [
    "#checking for general information of my data\n",
    "df1.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "354d1741",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'Patients ID', 'Number of Patients', 'Sex',\n",
       "       'Patient Age ', 'Urea', 'Cr', 'HbA1c', 'Chol', 'TG', 'HDL', 'LDL',\n",
       "       'VLDL', 'BMI', 'CLASS'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "47ecde42",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mukolab Convert categorical variables to numeric values\n",
    "le = LabelEncoder()\n",
    "df1['Cr'] = le.fit_transform(df1['Cr'])\n",
    "df1['HbA1c'] = le.fit_transform(df1['HbA1c'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "7293ea37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x284d27d86d0>"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2340x2340 with 182 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Mukolab Correlation matrices\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "corr_matrix = df1.corr()\n",
    "corr_matrix = df1.corr(method='spearman')\n",
    "sns.pairplot(corr_matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "ababea3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'Patients ID', 'Number of Patients', 'Patient Age ',\n",
       "       'Urea', 'Cr', 'HbA1c', 'Chol', 'TG', 'HDL', 'LDL', 'VLDL', 'BMI'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_matrix.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "8391e43f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mukolab Storering X matrics features and Response vector Y \n",
    "x = corr_matrix[['Urea','Cr','Chol','TG','HDL','LDL','VLDL','BMI','HbA1c']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "74e5581c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = corr_matrix['HbA1c']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "1d7aae96",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mukolab Splitting X and Y into training and testing datasets\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "18d83417",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "abf3bd74",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mukolab Selecting an algorithm\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "ce90a0e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "4fc0fd38",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 190,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab Fitting the model to the dataset\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "4a5375fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.00000000e+00 -4.04360707e-16 -2.41827233e-15  1.73777037e-15\n",
      "  7.53040345e-15  1.97488885e-15 -9.45007374e-16 -8.85050221e-16\n",
      "  1.00000000e+00]\n"
     ]
    }
   ],
   "source": [
    "#Mukolab Checking the model performance on training dataset\n",
    "print(model.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "0c7ab4ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.273559366969494e-16\n"
     ]
    }
   ],
   "source": [
    "print(model.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "45cd6c7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Coeff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Urea</th>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cr</th>\n",
       "      <td>-4.043607e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chol</th>\n",
       "      <td>-2.418272e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TG</th>\n",
       "      <td>1.737770e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HDL</th>\n",
       "      <td>7.530403e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDL</th>\n",
       "      <td>1.974889e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VLDL</th>\n",
       "      <td>-9.450074e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>-8.850502e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HbA1c</th>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Coeff\n",
       "Urea   0.000000e+00\n",
       "Cr    -4.043607e-16\n",
       "Chol  -2.418272e-15\n",
       "TG     1.737770e-15\n",
       "HDL    7.530403e-15\n",
       "LDL    1.974889e-15\n",
       "VLDL  -9.450074e-16\n",
       "BMI   -8.850502e-16\n",
       "HbA1c  1.000000e+00"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Mukolab Placing coefficents into a DataFrame\n",
    "pd.DataFrame(model.coef_, x.columns, columns = ['Coeff'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "3cec8d88",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Mukolab Making predictions for the dataset\n",
    "predictions = model.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "9eb3c14c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x284f1f36b50>"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Mukolab Ploting predictions for the dataset\n",
    "plt.scatter(y_test, predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "636b2520",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
